{"version":3,"sources":["Classifier.jsx","Overview.jsx","UpperBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["loadPredictions","a","query","signal","fetch","encodeURIComponent","res","ok","Error","statusText","json","useStyles","makeStyles","theme","root","display","justifyContent","flexWrap","margin","spacing","ClassesChips","data","classes","className","results","map","item","label","replaceAll","replace","txt","charAt","toUpperCase","substr","toLowerCase","Chip","color","disabled","Classifier","React","useState","setQuery","useAsync","deferFn","isPending","error","run","Box","m","Paper","elevation","p","Typography","variant","onSubmit","e","preventDefault","FormControl","fullWidth","TextField","id","value","onChange","target","Button","type","Divider","message","loadGenreCounts","loadLabelsCount","GenreCountsPlot","promiseFn","Pending","Fulfilled","x","genre_names","y","genre_counts","layout","autosize","yaxis","title","xaxis","useResizeHandler","style","width","height","Rejected","LabelsCountPlot","labels_name","labels_count","tickangle","automargin","Overview","mb","Grid","container","xs","mt","fontWeight","sm","flexGrow","UpperBar","AppBar","position","Toolbar","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd43b774.chunk.js","sourcesContent":["import React from \"react\";\nimport { useAsync } from \"react-async\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Divider from \"@material-ui/core/Divider\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst loadPredictions = async ([query], { signal }) => {\n  const res = await fetch(`/api/predict/${encodeURIComponent(query)}`, {\n    signal,\n  });\n  if (!res.ok) throw new Error(res.statusText);\n  return res.json();\n};\n\nfunction toTitleCase(str) {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    \"& > *\": {\n      margin: theme.spacing(0.5),\n    },\n  },\n}));\n\nfunction ClassesChips({ data }) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      {data.results.map((item) => {\n        const label = toTitleCase(item[0].replaceAll(\"_\", \" \"));\n        let chip;\n        if (item[1] >= 0.5) {\n          chip = <Chip label={label} color=\"primary\" />;\n        } else {\n          chip = <Chip label={label} disabled />;\n        }\n        return chip;\n      })}\n    </div>\n  );\n}\n\nexport default function Classifier() {\n  const [query, setQuery] = React.useState(\"\");\n\n  const { isPending, data, error, run } = useAsync({\n    deferFn: loadPredictions,\n  });\n\n  function handleChange({ target }) {\n    setQuery(target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    run(query);\n  }\n\n  return (\n    <Box m={3}>\n      <Paper elevation={3}>\n        <Box p={2}>\n          <Typography variant=\"h4\">\n            Analyze Message for Disaster Response\n          </Typography>\n        </Box>\n        <Box p={2}>\n          <form onSubmit={handleSubmit}>\n            <FormControl fullWidth variant=\"outlined\">\n              <TextField\n                id=\"message-field\"\n                label=\"Message\"\n                value={query}\n                variant=\"outlined\"\n                onChange={handleChange}\n              />\n              <Box p={2}>\n                <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n                  Classify Message\n                </Button>\n              </Box>\n            </FormControl>\n          </form>\n        </Box>\n      </Paper>\n      {(isPending || error || data) && (\n        <>\n          <Box m={2}>\n            <Divider variant=\"middle\" />\n          </Box>\n          <Paper elevation={3}>\n            <Box p={2}>\n              {isPending && <p>Loading...</p>}\n              {error && <p>{error.message}</p>}\n              {data && <ClassesChips data={data} />}\n            </Box>\n          </Paper>\n        </>\n      )}\n    </Box>\n  );\n}\n","import React from \"react\";\nimport Async from \"react-async\";\n\nimport Plot from \"react-plotly.js\";\n\nimport Box from \"@material-ui/core/Box\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst loadGenreCounts = async ({ signal }) => {\n  const res = await fetch(`/api/genre_counts`, { signal });\n  if (!res.ok) throw new Error(res.statusText);\n  return res.json();\n};\n\nconst loadLabelsCount = async ({ signal }) => {\n  const res = await fetch(`/api/labels_count`, { signal });\n  if (!res.ok) throw new Error(res.statusText);\n  return res.json();\n};\n\nfunction GenreCountsPlot() {\n  return (\n    <Async promiseFn={loadGenreCounts}>\n      <Async.Pending>Loading...</Async.Pending>\n      <Async.Fulfilled>\n        {(data) => (\n          <Plot\n            data={[\n              {\n                x: data.genre_names,\n                y: data.genre_counts,\n                type: \"bar\",\n              },\n            ]}\n            layout={{\n              autosize: true,\n              yaxis: { title: \"Count\" },\n              xaxis: { title: \"Genre\" },\n              title: \"Distribution of Message Genres\",\n            }}\n            useResizeHandler={true}\n            style={{ width: \"100%\", height: \"100%\" }}\n          />\n        )}\n      </Async.Fulfilled>\n      <Async.Rejected>\n        {(error) => `Something went wrong: ${error.message}`}\n      </Async.Rejected>\n    </Async>\n  );\n}\n\nfunction LabelsCountPlot() {\n  return (\n    <Async promiseFn={loadLabelsCount}>\n      <Async.Pending>Loading...</Async.Pending>\n      <Async.Fulfilled>\n        {(data) => (\n          <Plot\n            data={[\n              {\n                x: data.labels_name,\n                y: data.labels_count,\n                type: \"bar\",\n              },\n            ]}\n            layout={{\n              autosize: true,\n              yaxis: { title: \"Count\" },\n              xaxis: { title: \"Label\", tickangle: -45, automargin: true },\n              title: \"Distribution of Labels Count\",\n            }}\n            useResizeHandler={true}\n            style={{ width: \"100%\", height: \"100%\" }}\n          />\n        )}\n      </Async.Fulfilled>\n      <Async.Rejected>\n        {(error) => `Something went wrong: ${error.message}`}\n      </Async.Rejected>\n    </Async>\n  );\n}\n\nexport default function Overview() {\n  return (\n    <>\n      <Box mb={2}>\n        <Divider variant=\"middle\" />\n      </Box>\n      <Grid container>\n        <Grid item xs={12}>\n          <Typography variant=\"h6\">\n            <Box mt={2} fontWeight=\"fontWeightLight\">\n              Analysis of the Dataset\n            </Box>\n          </Typography>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Box m={3}>\n            <Paper elevation={3}>\n              <GenreCountsPlot />\n            </Paper>\n          </Box>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Box m={3}>\n            <Paper elevation={3}>\n              <LabelsCountPlot />\n            </Paper>\n          </Box>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function UpperBar() {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" className={classes.title}>\n          Disaster Response Project\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import \"./App.css\";\n\nimport Grid from \"@material-ui/core/Grid\";\n\nimport Classifier from \"./Classifier\";\nimport Overview from \"./Overview\";\nimport UpperBar from \"./UpperBar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid container>\n        <Grid item xs={12}>\n          <UpperBar />\n        </Grid>\n        <Grid item xs={12}>\n          <Classifier />\n        </Grid>\n        <Grid item xs={12}>\n          <Overview />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}